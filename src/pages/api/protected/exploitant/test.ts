import type { NextApiRequest, NextApiResponse } from "next";
import { prisma } from "~/server/db";
import { getServerSession } from "next-auth";
import { authOptions } from '~/pages/api/auth/[...nextauth]'
import { validateUserSession, makeApiCall, generateID } from "~/utils/server/database-tools";
import type { TestResult, TestResponse } from "~/types/test";
import { TestStatus } from "~/types/test";
import { ExploitantenResponse } from ".";
import type { ExploitantResponse } from "~/pages/api/protected/exploitant/[id]";
import { TestError } from "~/types/test";
import type { VSExploitantGemeenteLink } from "~/pages/api/protected/exploitant/[id]/gemeenten/[gemeenteid]";

type ApiResponse<T> = {
  data?: T;
  error?: string;
};

export default async function handle(
  req: NextApiRequest,
  res: NextApiResponse<TestResponse>
) {
  const session = await getServerSession(req, res, authOptions);
  const validationResult = await validateUserSession(session, "exploitant");
  
  if ('error' in validationResult) {
    res.status(validationResult.status).json({
      success: false,
      tests: [{
        name: "Authentication",
        status: TestStatus.Failed,
        message: "User not authenticated"
      }]
    });
    return;
  }

  const cleanupResult = await cleanupTestdata(req);
  if (cleanupResult.status === TestStatus.Failed) {
    res.status(500).json({
      success: false,
      tests: [{
        name: "Cleanup Testdata",
        status: TestStatus.Failed,
        message: "Failed to cleanup test data",
        details: cleanupResult.details
      }]
    });    
    return;
  }

  const testResults: TestResult[] = [];
  let createdRecordId: string | null = null;
  let createdGemeenteId: string | null = null;

  // Initialize all test results with not executed state
  testResults.push(
    {
      name: "Create Record",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    }, 
    {
      name: "Retrieve All Records",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    }, 
    {
      name: "Retrieve Single Record",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    }, 
    {
      name: "Update Record",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    }, 
    {
      name: "Delete Record",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    },
    {
      name: "Create Gemeente Link",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    },
    {
      name: "Get Gemeente Link",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    },
    {
      name: "Update Gemeente Link",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    },
    {
      name: "Delete Gemeente Link",
      status: TestStatus.NotExecuted,
      message: "Not executed"
    }
  );

  try {
    // Test 1: Create a new record
    const createTest = await testCreateExploitant(req);
    testResults[0] = createTest;
    if (createTest.status === TestStatus.Failed) {
      throw new TestError("Create test failed", createTest);
    }
    createdRecordId = (createTest.details as { ID: string })?.ID || null;
    console.debug("*** READALL TEST: CREATE EXPLOITANT", createdRecordId);
    // createdRecordId = null;

    // Test 2: Retrieve all records and check if the new record is included
    const readAllTest = await testReadAllExploitanten(req);
    testResults[1] = readAllTest;
    if (readAllTest.status === TestStatus.Failed) {
      throw new TestError("Read all test failed", readAllTest);
    }

    // Test 3: Retrieve the new record
    if (createdRecordId) {
      const readSingleTest = await testReadSingleExploitant(req, createdRecordId);
      testResults[2] = readSingleTest;
      if (readSingleTest.status === TestStatus.Failed) {
        throw new TestError("Read single test failed", readSingleTest);
      }
    }

    // Test 4: Update the record
    if (createdRecordId) {
      const updateTest = await testUpdateExploitant(req, createdRecordId);
      testResults[3] = updateTest;
      if (updateTest.status === TestStatus.Failed) {
        throw new TestError("Update test failed", updateTest);
      }
    }

    // Create test gemeente
    const gemeenteTest = await testCreateGemeente(req);
    if (gemeenteTest.status === TestStatus.Failed) {
      throw new TestError("Create gemeente test failed", gemeenteTest);
    }
    createdGemeenteId = (gemeenteTest.details as { ID: string })?.ID || null;
    console.debug("*** READALL TEST: CREATE GEMEENTE", createdGemeenteId);

    // Test 5: Create gemeente link
    if (createdRecordId && createdGemeenteId) {
      const createLinkTest = await testCreateGemeenteLink(req, createdRecordId, createdGemeenteId);
      testResults[5] = createLinkTest;
      if (createLinkTest.status === TestStatus.Failed) {
        throw new TestError("Create gemeente link test failed", createLinkTest);
      }
    }

    // Test 6: Get gemeente link
    if (createdRecordId && createdGemeenteId) {
      const getLinkTest = await testGetGemeenteLink(req, createdRecordId, createdGemeenteId);
      testResults[6] = getLinkTest;
      if (getLinkTest.status === TestStatus.Failed) {
        throw new TestError("Get gemeente link test failed", getLinkTest);
      }
    }

    // Test 7: Update gemeente link
    if (createdRecordId && createdGemeenteId) {
      const updateLinkTest = await testUpdateGemeenteLink(req, createdRecordId, createdGemeenteId);
      testResults[7] = updateLinkTest;
      if (updateLinkTest.status === TestStatus.Failed) {
        throw new TestError("Update gemeente link test failed", updateLinkTest);
      }
    }

    // Test 8: Delete gemeente link
    if (createdRecordId && createdGemeenteId) {
      const deleteLinkTest = await testDeleteGemeenteLink(req, createdRecordId, createdGemeenteId);
      testResults[8] = deleteLinkTest;
      if (deleteLinkTest.status === TestStatus.Failed) {
        throw new TestError("Delete gemeente link test failed", deleteLinkTest);
      }
    }

    // Test 9: Delete the record
    if (createdRecordId) {
      const deleteTest = await testDeleteExploitant(req, createdRecordId);
      testResults[4] = deleteTest;
      if (deleteTest.status === TestStatus.Failed) {
        throw new TestError("Delete test failed", deleteTest);
      } else {
        createdRecordId = null;
      }
    }

    res.status(200).json({
      success: testResults.every(t => (t.status === TestStatus.Success || t.status === TestStatus.NotExecuted)),
      tests: testResults
    });
  } catch (error) {
    if(error instanceof TestError) {
      console.error(`Test failed: ${error.message} ${JSON.stringify(error.testResult,null,2)}`);
    } else {
      console.error("Unexpected error:", error);
    }

    res.status(500).json({
      success: false,
      tests: testResults
    });
  } finally {
    // Always attempt cleanup
    if (createdRecordId) {
      try {
        const { success, result } = await makeApiCall<ExploitantResponse>(req, `/api/protected/exploitant/${createdRecordId}`, 'DELETE');
        if (!success || result?.error) {
          console.error("Failed to clean up test record:", result?.error);
        }
      } catch (cleanupError) {
        console.error("Error during cleanup:", cleanupError);
      }
    }
    if (createdGemeenteId) {
      try {
        await prisma.contacts.delete({
          where: { ID: createdGemeenteId }
        });
      } catch (cleanupError) {
        console.error("Error cleaning up test gemeente:", cleanupError);
      }
    }
  }
}

export const testRecordCreateExploitant = {
  CompanyName: `Test Exploitant ${Date.now()}`,
  ItemType: "exploitant",
  UrlName: `test-exploitant-autotesting`,
  Status: "1",
  Helpdesk: "test@example.com",
  ParentID: null
};

async function testCreateExploitant(req: NextApiRequest): Promise<TestResult> {
  try {
    console.debug("*** TEST CREATE EXPLOITANT");

    console.debug("*** TEST CREATE EXPLOITANT", testRecordCreateExploitant);
    const { success, result } = await makeApiCall<ExploitantenResponse>(req, '/api/protected/exploitant/new', 'POST', testRecordCreateExploitant);
    console.debug("*** TEST CREATE EXPLOITANT", success, result);
    if (!success || !result) {
      return {
        name: "Create Record",
        status: TestStatus.Failed,
        message: `Failed to create record: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    const ID = result.data?.[0]?.ID || false;
    if (!ID) {
      return {
        name: "Create Record",
        status: TestStatus.Failed,
        message: "Failed to get ID from created record",
        details: result.data
      };
    }

    return {
      name: "Create Record",
      status: TestStatus.Success,
      message: "Successfully created test record",
      details: { ID }
    };
  } catch (error) {
    return {
      name: "Create Record",
      status: TestStatus.Failed,
      message: "Failed to create test record",
      details: error
    };
  }
}

async function testReadAllExploitanten(req: NextApiRequest): Promise<TestResult> {
  try {
    const { success, result }  = await makeApiCall<ExploitantenResponse>(req, '/api/protected/exploitant');
    if (!success || !result) {
      return {
        name: "Retrieve All Records",
        status: TestStatus.Failed,
        message: `Failed to retrieve records: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    return {
      name: "Retrieve All Records",
      status: TestStatus.Success,
      message: `Successfully retrieved ${result.data?.length} records`,
      details: { count: result.data?.length }
    };
  } catch (error) {
    return {
      name: "Retrieve All Records",
      status: TestStatus.Failed,
      message: "Failed to retrieve records",
      details: error
    };
  }
}

async function testReadSingleExploitant(req: NextApiRequest, id: string): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ExploitantResponse>(req, `/api/protected/exploitant/${id}`);
    console.debug("*** TEST READ SINGLE EXPLOITANT", id, success, result);
    if (!success || !result) {
      return {
        name: "Retrieve Single Record",
        status: TestStatus.Failed,
        message: `Failed to retrieve single record: ${result?.error || 'Unknown error'}`,
        details: { id, error: result?.error }
      };
    }

    return {
      name: "Retrieve Single Record",
      status: TestStatus.Success,
      message: "Successfully retrieved the test record",
      details: result?.data
    };
  } catch (error) {
    return {
      name: "Retrieve Single Record",
      status: TestStatus.Failed,
      message: "Failed to retrieve single record",
      details: error
    };
  }
}

async function testUpdateExploitant(req: NextApiRequest, id: string): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ExploitantResponse>(req, `/api/protected/exploitant/${id}`);
    if (!success || !result) {
      return {
        name: "Update Record",
        status: TestStatus.Failed,
        message: `Failed to retrieve record for update: ${result?.error || 'Unknown error'}`,
        details: { id, error: result?.error }
      };
    }

    const updatedData = {
      ID: result.data?.ID,
      CompanyName: `Updated ${result.data?.CompanyName}`,
      Helpdesk: "updated@example.com",
      Status: "2"
    };

    const { success: updateSuccess, result: updateResult } = await makeApiCall<ExploitantResponse>(req, `/api/protected/exploitant/${id}`, 'PUT', updatedData);
    if (!updateSuccess || !updateResult) {
      return {
        name: "Update Record",
        status: TestStatus.Failed,
        message: `Failed to update record: ${updateResult?.error || 'Unknown error'}`,
        details: { id, error: updateResult?.error }
      };
    }

    return {
      name: "Update Record",
      status: TestStatus.Success,
      message: "Successfully updated the test record",
      details: updateResult.data
    };
  } catch (error) {
    return {
      name: "Update Record",
      status: TestStatus.Failed,
      message: "Failed to update record",
      details: error
    };
  }
}

async function testDeleteExploitant(req: NextApiRequest, id: string): Promise<TestResult> {
  try {
    const apiresult = await makeApiCall<ExploitantResponse>(req, `/api/protected/exploitant/${id}`, 'DELETE');
    if (!apiresult.success) {
      return {
        name: "Delete Record",
        status: TestStatus.Failed,
        message: `Failed to delete record: ${apiresult.result?.error || 'Unknown error'}`,
        details: { id, error: apiresult.result?.error }
      };
    }

    return {
      name: "Delete Record",
      status: TestStatus.Success,
      message: "Successfully deleted the test record",
      details: { ID: id }
    };
  } catch (error) {
    return {
      name: "Delete Record",
      status: TestStatus.Failed,
      message: "Failed to delete record",
      details: error
    };
  }
} 

export const testRecordCreateGemeente = {
  ID: generateID(),
  CompanyName: `Testgemeente Exploitant ${Date.now()}`,
  ItemType: "gemeente",
  UrlName: `test-gemeente-autotesting`,
  Status: "1",
  Helpdesk: "test@example.com",
  ParentID: null
};

async function testCreateGemeente(req: NextApiRequest): Promise<TestResult> {
  try {
    const newGemeente = await prisma.contacts.create({
      data: testRecordCreateGemeente,
    });

    console.error("*** TEST CREATE GEMEENTE", newGemeente);
    return {
      name: "Create Test Gemeente",
      status: TestStatus.Success,
      message: "Successfully created test gemeente",
      details: { ID: newGemeente.ID }
    };
  } catch (error) {
    console.error("*** TEST CREATE GEMEENTE", error);
    return {
      name: "Create Test Gemeente",
      status: TestStatus.Failed,
      message: "Failed to create test gemeente",
      details: error
    };
  }
}

async function testCreateGemeenteLink(
  req: NextApiRequest, 
  exploitantId: string, 
  gemeenteId: string
): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ApiResponse<VSExploitantGemeenteLink>>(
      req,
      `/api/protected/exploitant/${exploitantId}/gemeenten/${gemeenteId}`,
      'POST',
      { admin: true }
    );

    if (!success || !result?.data) {
      return {
        name: "Create Gemeente Link",
        status: TestStatus.Failed,
        message: `Failed to create gemeente link: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    return {
      name: "Create Gemeente Link",
      status: TestStatus.Success,
      message: "Successfully created gemeente link",
      details: result.data
    };
  } catch (error) {
    return {
      name: "Create Gemeente Link",
      status: TestStatus.Failed,
      message: "Failed to create gemeente link",
      details: error
    };
  }
}

async function testGetGemeenteLink(
  req: NextApiRequest, 
  exploitantId: string, 
  gemeenteId: string
): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ApiResponse<VSExploitantGemeenteLink>>(
      req,
      `/api/protected/exploitant/${exploitantId}/gemeenten/${gemeenteId}`,
      'GET'
    );

    if (!success || !result?.data) {
      return {
        name: "Get Gemeente Link",
        status: TestStatus.Failed,
        message: `Failed to get gemeente link: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    return {
      name: "Get Gemeente Link",
      status: TestStatus.Success,
      message: "Successfully retrieved gemeente link",
      details: result.data
    };
  } catch (error) {
    return {
      name: "Get Gemeente Link",
      status: TestStatus.Failed,
      message: "Failed to get gemeente link",
      details: error
    };
  }
}

async function testUpdateGemeenteLink(
  req: NextApiRequest, 
  exploitantId: string, 
  gemeenteId: string
): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ApiResponse<VSExploitantGemeenteLink>>(
      req,
      `/api/protected/exploitant/${exploitantId}/gemeenten/${gemeenteId}`,
      'PUT',
      { admin: false }
    );

    if (!success || !result?.data) {
      return {
        name: "Update Gemeente Link",
        status: TestStatus.Failed,
        message: `Failed to update gemeente link: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    return {
      name: "Update Gemeente Link",
      status: TestStatus.Success,
      message: "Successfully updated gemeente link",
      details: result.data
    };
  } catch (error) {
    return {
      name: "Update Gemeente Link",
      status: TestStatus.Failed,
      message: "Failed to update gemeente link",
      details: error
    };
  }
}

async function testDeleteGemeenteLink(
  req: NextApiRequest, 
  exploitantId: string, 
  gemeenteId: string
): Promise<TestResult> {
  try {
    const { success, result } = await makeApiCall<ApiResponse<null>>(
      req,
      `/api/protected/exploitant/${exploitantId}/gemeenten/${gemeenteId}`,
      'DELETE'
    );

    if (!success) {
      return {
        name: "Delete Gemeente Link",
        status: TestStatus.Failed,
        message: `Failed to delete gemeente link: ${result?.error || 'Unknown error'}`,
        details: result?.error
      };
    }

    return {
      name: "Delete Gemeente Link",
      status: TestStatus.Success,
      message: "Successfully deleted gemeente link",
      details: null
    };
  } catch (error) {
    return {
      name: "Delete Gemeente Link",
      status: TestStatus.Failed,
      message: "Failed to delete gemeente link",
      details: error
    };
  }
}

async function cleanupTestdata(req: NextApiRequest): Promise<TestResult> {
  try {
    await prisma.contacts.deleteMany({
      where: { 
        OR: [
          { UrlName: `test-exploitant-autotesting` },
          { UrlName: `test-gemeente-autotesting` }
        ]
      }
    });

    return {
      name: "Cleanup Testdata",
      status: TestStatus.Success,
      message: "Successfully cleaned up test data"
    };
  } catch (e) {
    console.error("Error cleaning up test data:", e);
    return {
      name: "Delete Record",
      status: TestStatus.Failed,
      message: "Failed to delete record",
      details: e
    };
  }
}

