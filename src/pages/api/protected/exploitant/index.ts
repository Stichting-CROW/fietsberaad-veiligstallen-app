import type { NextApiRequest, NextApiResponse } from "next";
import type { Prisma } from "@prisma/client";
import { prisma } from "~/server/db";
import { type VSContactExploitant, exploitantSelect } from "~/types/contacts";
import { getServerSession } from "next-auth";
import { authOptions } from '~/pages/api/auth/[...nextauth]'
import { validateUserSession } from "~/utils/server/database-tools";

export type ExploitantenResponse = {
  data?: VSContactExploitant[];
  error?: string;
};

export default async function handle(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const session = await getServerSession(req, res, authOptions);
  const validateUserSessionResult = await validateUserSession(session, "exploitant");
  
  if ('error' in validateUserSessionResult) {
    res.status(validateUserSessionResult.status).json({exploitanten: []});
    return;
  }

  const { sites, userId } = validateUserSessionResult;
  
  switch (req.method) {
    case "GET": {
      // GET all exploitant organizations user can access
      let where: Prisma.contactsWhereInput = {
        ItemType: "exploitant"
      };

      // limit to exploitant organizations that are managing the given contactID
      if(req.query.contactID) {
        const contactID = req.query.contactID as string;
        const managingContacts = await prisma.contact_contact.findMany({
          where: {
            childSiteID: contactID
          }
        });
        const managingContactIDs = managingContacts.map(c => c.parentSiteID);
        where.ID = { in: managingContactIDs };
      }

      const exploitanten = (await prisma.contacts.findMany({ where, select: exploitantSelect})) as unknown as VSContactExploitant[];
      const result: ExploitantenResponse = {
        data: exploitanten
      }
      res.status(200).json(result);
      break;
    }
    default: {
      res.status(405).end({ error: "Method Not Allowed" }); // Method Not Allowed
    }
  }
} 