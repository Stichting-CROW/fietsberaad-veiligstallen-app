import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Table } from '~/components/common/Table';
import { SearchFilter } from '~/components/common/SearchFilter';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { useExploitanten } from '~/hooks/useExploitanten';
import { useGemeentenInLijst } from '~/hooks/useGemeenten';
import { VSSecurityTopic } from '~/types/securityprofile';
import { userHasRight } from '~/types/utils';
import { makeClientApiCall } from '~/utils/client/api-tools';
import { type ExploitantGemeenteResponse } from '~/pages/api/protected/exploitant/[id]/gemeenten/[gemeenteid]';
import type { VSContactExploitant } from "~/types/contacts";

type ExploitantManagementComponentProps = {
  onCancel: () => void;
  onSave: () => void;
};

const ExploitantManagementComponent: React.FC<ExploitantManagementComponentProps> = ({ onCancel, onSave }) => {
  const { data: session } = useSession();
  const activeContactId = session?.user?.activeContactId;
  const { exploitanten, isLoading: isLoadingExploitanten, error: errorExploitanten, reloadExploitanten } = useExploitanten(activeContactId || "");
  const { exploitanten: allExploitanten, isLoading: isLoadingAllExploitanten, error: errorAllExploitanten, reloadExploitanten: reloadAllExploitanten } = useExploitanten(undefined);
  const { gemeenten, isLoading: isLoadingGemeenten, error: errorGemeenten } = useGemeentenInLijst();

  const [filterText, setFilterText] = useState("");
  const [sortColumn, setSortColumn] = useState<string>("Naam");
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [toggledExploitantIds, setToggledExploitantIds] = useState<Set<string>>(new Set());
  const [hasManageExploitantsRights, setHasManageExploitantsRights] = useState<boolean>(false);

  const filteredContacts = allExploitanten.filter(contact => 
    contact.CompanyName?.toLowerCase().includes(filterText.toLowerCase())
  );

  // Check if user has correct access rights
  useEffect(() => {
    setHasManageExploitantsRights(
      userHasRight(session?.user?.securityProfile, VSSecurityTopic.exploitanten_toegangsrecht)
    );
  }, [session?.user]);

  const getGemeenten = (contact: VSContactExploitant) => {
    const gemeenteIDs = contact.isManagingContacts?.map(c => c.childSiteID) || [];
    const selected = gemeenteIDs.map(id => {
      const gemeente = gemeenten.find(g => g.ID === id);
      return gemeente ? gemeente.CompanyName : "Onbekende gemeente";
    });
    return selected.sort().map(g => <>{g}<br/></>);
  };

  const handleToggleExploitant = (exploitantID: string, isSelected: boolean) => {
    setToggledExploitantIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(exploitantID)) {
        newSet.delete(exploitantID);
      } else {
        newSet.add(exploitantID);
      }
      return newSet;
    });
  };

  const handleSaveChanges = async () => {
    if (activeContactId === undefined) {
      alert("No active contact ID found");
      return;
    }

    for (const id of Array.from(toggledExploitantIds)) {
      const isCurrentlySelected = exploitanten.some(e => e.ID === id);
      if (isCurrentlySelected === false) {
        // add link
        const url = `/api/protected/exploitant/${id}/gemeenten/${activeContactId}`;
        const response = await makeClientApiCall<ExploitantGemeenteResponse>(url, 'POST', { admin: true });
        if (!response.success) {
          console.error("Failed to add link to exploitant: " + id + " " + activeContactId);
          return;
        }
      } else {
        // remove link
        const url = `/api/protected/exploitant/${id}/gemeenten/${activeContactId}`;
        const response = await makeClientApiCall<ExploitantGemeenteResponse>(url, 'DELETE', {});
        if (!response.success) {
          console.error("Failed to remove link from exploitant: " + id + " " + activeContactId);
          return;
        }
      }
    }

    setToggledExploitantIds(new Set());
    reloadExploitanten();
    reloadAllExploitanten();
    onSave();
  };

  const handleSort = (header: string) => {
    if (sortColumn === header) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(header);
      setSortDirection('asc');
    }
  };

  const getSortedData = () => {
    const sorted = [...filteredContacts].sort((a, b) => {
      let aValue: string | number = '';
      let bValue: string | number = '';

      switch (sortColumn) {
        case 'Naam':
          aValue = a.CompanyName || '';
          bValue = b.CompanyName || '';
          break;
        case 'E-mail':
          aValue = a.Helpdesk || '';
          bValue = b.Helpdesk || '';
          break;
        case 'Actief':
          aValue = a.Status === "1" ? 1 : 0;
          bValue = b.Status === "1" ? 1 : 0;
          break;
        default:
          aValue = a.CompanyName || '';
          bValue = b.CompanyName || '';
      }

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortDirection === 'asc' 
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      } else {
        return sortDirection === 'asc' 
          ? (aValue as number) - (bValue as number)
          : (bValue as number) - (aValue as number);
      }
    });

    return sorted;
  };

  if (isLoadingExploitanten || isLoadingGemeenten || isLoadingAllExploitanten) {
    const whatIsLoading = [
      isLoadingExploitanten && "Exploitanten",
      isLoadingGemeenten && "Gemeenten",
    ].filter(Boolean).join(" + ");
    
    return <LoadingSpinner message={whatIsLoading + ' laden'} />;
  }

  if (errorExploitanten || errorGemeenten || errorAllExploitanten) {
    return <div>Error: {errorExploitanten || errorGemeenten || errorAllExploitanten}</div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Externe organisaties</h1>
        <div className="flex gap-2">
          <button 
            onClick={handleSaveChanges}
            disabled={toggledExploitantIds.size === 0}
            className={`font-bold py-2 px-4 rounded ${
              toggledExploitantIds.size === 0 
                ? 'bg-gray-300 cursor-not-allowed' 
                : 'bg-green-500 hover:bg-green-700'
            } text-white`}
          >
            Opslaan
          </button>
          <button 
            onClick={onCancel}
            className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
          >
            Afbreken
          </button>
        </div>
      </div>

      <div className="mt-4 mb-4">
        <p className="text-lg font-medium text-gray-700">
          Op deze pagina kunt u {hasManageExploitantsRights ? "selecteren" : "bekijken"} welke externe organisaties toegang tot uw organisatie hebben.
        </p>
      </div>


      <div className="mb-4">
        <SearchFilter
          id="exploitantName"
          label="Exploitant:"
          value={filterText}
          onChange={(value) => setFilterText(value)}
        />
      </div>
      
      <Table
        columns={[
          { header: "Naam", accessor: "CompanyName" },
          { header: "E-mail", accessor: "Helpdesk" },
          {
            header: "Gemeente(n)", 
            accessor: (contact: VSContactExploitant) => getGemeenten(contact)
          },
          { 
            header: "Actief", 
            accessor: (contact: VSContactExploitant) => contact.Status === "1" ? 
              <span className="text-green-500">●</span> : 
              <span className="text-red-500">●</span>
          },
          {
            header: "Heeft toegang", 
            accessor: (contact: VSContactExploitant) => {
              const isSelected = exploitanten.some(e => e.ID === contact.ID);
              return (
                <div className="flex items-center gap-1">
                  <input 
                    type="checkbox" 
                    checked={toggledExploitantIds.has(contact.ID) ? !isSelected : isSelected} 
                    onChange={() => handleToggleExploitant(contact.ID, isSelected)} 
                  />
                  {toggledExploitantIds.has(contact.ID) && (
                    <span>*</span>
                  )}
                </div>
              );
            }
          }
        ]}
        data={getSortedData()}
        className="min-w-full bg-white"
        sortableColumns={["Naam", "E-mail", "Actief"]}
        sortColumn={sortColumn}
        sortDirection={sortDirection}
        onSort={handleSort}
      />
    </div>
  );
};

export default ExploitantManagementComponent;
