import { useEffect, useState } from "react";
import { VSMenuTopic } from "~/types";
import { VSContactDataprovider, VSContactExploitant, VSContactGemeente, } from "~/types/contacts";
import { VSUserWithRoles } from "~/types/users";
import { ReportBikepark } from '~/components/beheer/reports/ReportsFilter'; // Adjust the import path if necessary
import { useRouter } from "next/router";
import Link from "next/link";

// import moment from "moment";
interface ExploreExploitantProps {
    users: VSUserWithRoles[];
    gemeenten: VSContactGemeente[];
    exploitanten: VSContactExploitant[];
    dataproviders: VSContactDataprovider[];
    stallingen: ReportBikepark[];
}

const ExploreExploitant = (props: ExploreExploitantProps) => {  
    const router = useRouter();

    const queryExploitantID = Array.isArray(router.query.exploitantID) ? router.query.exploitantID[0] : router.query.exploitantID;

    const { exploitanten, users, gemeenten } = props;
    const [filteredExploitanten, setFilteredExploitanten] = useState<VSContactExploitant[]>(exploitanten);
    const [selectedExploitantID, setSelectedExploitantID] = useState<string | null>(queryExploitantID || null);

    const [nameFilter, setNameFilter] = useState<string>("");

    useEffect(() => {
        const currentExploitantID = router.query.exploitantID;
        if (currentExploitantID && currentExploitantID !== selectedExploitantID) {
                setSelectedExploitantID(currentExploitantID as string);
            }
    }, [router.query.exploitantID]);

    useEffect(() => {
        if(router.query.exploitantID !== selectedExploitantID) {
            if(selectedExploitantID) {
            router.push({
                pathname: router.pathname,
                    query: { ...router.query, exploitantID: selectedExploitantID }
                });
            }
        } else {
            // delete exploitantID from router query
            const { exploitantID, ...rest } = router.query;
            router.push({
                pathname: router.pathname,
                query: rest
            });
        }
    }, [selectedExploitantID]);
                
    useEffect(() => {
        const filtered = exploitanten
            .filter((exploitant) => 
                nameFilter === "" || 
                exploitant.CompanyName?.toLowerCase().includes(nameFilter.toLowerCase())
            )
            // .filter((exploitant) => {
            //     const numStallingen = exploitant.fietsenstallingen_fietsenstallingen_SiteIDTocontacts?.length || 0;
            //     const hasUsers = users.some((user) => 
            //         user.security_users_sites.some((site) => site.SiteID === exploitant.ID)
            //     );
            //     return (
            //         (numStallingen === 0 && showExploitantenWithoutStallingen !== "no" || 
            //         numStallingen > 0 && showExploitantenWithoutStallingen !== "only") &&
            //         (!hasUsers && showExploitantenWithoutUsers !== "no" || 
            //         hasUsers && showExploitantenWithoutUsers !== "only")
            //     );
            // });
        setFilteredExploitanten(filtered);
    }, [nameFilter, exploitanten]);

    const filterNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
        setNameFilter(event.target.value);
    }

    const selectExploitantHandler = (exploitantID: string) => {
        setSelectedExploitantID(exploitantID);
    }

    const resetFilters = () => {
        setNameFilter("");
    };

    const renderFilterSection = () => {
        return (
            <div className="p-6 bg-white shadow-md rounded-md">
                <div className="flex justify-between items-center mb-4">
                    <h1 className="text-2xl font-bold">Exploitant Explorer</h1>
                    <button 
                        className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
                        onClick={resetFilters}
                    >
                        Reset Filters
                    </button>
                </div>
                <form className="space-y-4">
                    <div className="flex flex-col">
                        <label htmlFor="exploitantName" className="text-sm font-medium text-gray-700">Exploitant Name:</label>
                        <input 
                            type="text" 
                            id="exploitantName" 
                            name="exploitantName" 
                            placeholder="Type to search..." 
                            className="mt-1 p-2 border border-gray-300 rounded-md" 
                            value={nameFilter}
                            onChange={filterNameHandler} 
                        />
                    </div>
                    <div>
                        <h2 className="text-xl font-semibold mt-6">List of Exploitanten</h2>
                        <ul className="list-disc list-inside max-h-fit overflow-y-auto">
                            {filteredExploitanten.map((exploitant) => (
                                <li 
                                    key={exploitant.ID} 
                                    className={`cursor-pointer p-2 ${selectedExploitantID === exploitant.ID ? 'bg-blue-100' : ''}`} 
                                    onClick={() => selectExploitantHandler(exploitant.ID)}
                                >
                                    {exploitant.CompanyName}
                                </li>
                            ))}
                        </ul>
                    </div>
                </form>
            </div>
        );
    }

    const selectedExploitant = exploitanten.find(exploitant => exploitant.ID === selectedExploitantID);
    const mainUser = users.find((user) => user.SiteID === selectedExploitantID);
    const subUsers = users.filter((user) => user.ParentID === mainUser?.UserID);

    const renderExploitantDetailsSection = () => {
        if (!selectedExploitant) return null;

        const exploitantGemeenten = mainUser?.security_users_sites || [];

        return (
            <div className="p-2 bg-white shadow-md rounded-md">
                <div className="text-2xl font-bold mb-4">Exploitant Details</div>
                <div className="space-y-2">
                    <div className="flex items-center">
                        <label className="w-32 text-sm font-medium text-gray-700">ID:</label>
                        <span className="text-gray-900">{selectedExploitant.ID}</span>
                    </div>
                    <div className="flex items-center">
                        <label className="w-32 text-sm font-medium text-gray-700">Name:</label>
                        <span className="text-gray-900">{selectedExploitant.CompanyName}</span>
                    </div>
                    <div className="flex items-center">
                        <label className="w-32 text-sm font-medium text-gray-700">Helpdesk:</label>
                        <span className="text-gray-900">{selectedExploitant.Helpdesk}</span>
                    </div>
                    <div className="flex items-center">
                        <label className="w-32 text-sm font-medium text-gray-700">UrlName:</label>
                        <span className="text-gray-900">{selectedExploitant.UrlName}</span>
                    </div>
                    <div className="flex items-center">
                        <label className="w-32 text-sm font-medium text-gray-700">Status:</label>
                        <span className="text-gray-900">{selectedExploitant.Status === "1" ? "Active" : "Inactive"}</span>
                    </div>

                    <div className="text-xl font-bold mb-2">Main User</div>
                        <div className="flex items-center mb-4">
                            { mainUser ? (
                                <li key={mainUser.UserID}>
                                    <Link href={`/beheer/${VSMenuTopic.ExploreUsers}/?userID=${mainUser.UserID}`} target="_blank"><span className="text-gray-900">{mainUser.DisplayName} [{mainUser.UserName}/{mainUser.RoleID}]</span></Link>
                                </li>
                            ) : (
                                <li key={'no-main-user'}>
                                    <span className="text-gray-900">No main user found</span>
                                </li>
                            )}
                        </div>
                        <div className="text-xl font-bold mb-2">Sub Users</div>
                        { subUsers && subUsers.length > 0 ? (
                            <ul className="list-disc list-inside pl-4 mb-4">
                                {subUsers.map((user) => { 
                                    return (
                                        <li key={user.UserID}>
                                            <Link href={`/beheer/${VSMenuTopic.ExploreUsers}/?userID=${user.UserID}`} target="_blank"><span className="text-gray-900">{user.DisplayName} [{user.UserName}/{user.RoleID}]</span></Link>
                                        </li>
                                    )
                                })}
                            </ul>
                        ) : (
                            <li key={'no-sub-users'} className="mb-4">
                                <span className="text-gray-900">No sub users found</span>
                            </li>
                        )}
                    <div className="text-xl font-bold mb-2">Gemeenten</div>
                        { exploitantGemeenten.length > 0 ? (
                            <ul className="list-disc list-inside pl-4">
                                    {exploitantGemeenten
                                    .map((gemeente) => { 
                                        const gemeenteDetails = gemeenten.find((eg) => eg.ID === gemeente.SiteID);

                                        if(!gemeenteDetails) {
                                            console.log(`*** contact with id ${gemeente.SiteID} not found for exploitant ${selectedExploitant?.ID}/${selectedExploitant?.CompanyName}`);
                                            return null;
                                        }

                                        return (
                                            <Link href={`/beheer/${VSMenuTopic.ExploreGemeenten}/?gemeenteID=${gemeente.SiteID}`} target="_blank"> <li key={gemeente.SiteID}>{gemeenteDetails?.CompanyName}</li></Link>
                                        )
                                    })
                                }
                            </ul>) : (
                        <li key={'no-gemeenten'}>
                            <span className="text-gray-900">No gemeenten found</span>
                        </li>
                    )}
                </div>
            </div>
        );
    }

    return (
        <div className="w-3/4 mx-auto grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                {renderFilterSection()}
            </div>
            <div>
                {renderExploitantDetailsSection()}
            </div>
        </div>
    );
}

export default ExploreExploitant;