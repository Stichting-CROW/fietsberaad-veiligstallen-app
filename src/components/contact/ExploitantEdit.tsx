import React, { useEffect, useState } from 'react';
import FormInput from "~/components/Form/FormInput";
import PageTitle from "~/components/PageTitle";
import Button from '@mui/material/Button';

import { type VSContactExploitant, VSContactItemType } from '~/types/contacts';
import { makeClientApiCall } from '~/utils/client/api-tools';

import FormSelect from '../Form/FormSelect';
import { type ExploitantResponse } from '~/pages/api/protected/exploitant/[id]';
import { getDefaultNewExploitant } from '~/types/database';
import { useExploitant } from '~/hooks/useExploitant';
import { type ExploitantValidateResponse } from '~/pages/api/protected/exploitant/validate';

type ExploitantEditProps = {
    id: string;
    onClose?: (confirmClose: boolean) => void;
}

const DEFAULT_EXPLOITANT: VSContactExploitant = {
    ...getDefaultNewExploitant("Exploitant " + new Date().toISOString()),
};

const ExploitantEdit = (props: ExploitantEditProps) => {
    const [isEditing, setIsEditing] = useState(!!props.onClose);

    const { exploitant: activecontact, isLoading: isLoading, error: error, reloadExploitant } = useExploitant(props.id);

    type CurrentState = Partial<VSContactExploitant> & {
        CompanyName: string | null;
        ItemType: string | null;
        UrlName: string | null;
        Helpdesk: string | null;
        Status: string | null;
    }

    const isNew = props.id === "new";

    const allowEdit = !!props.onClose; 

    const [CompanyName, setCompanyName] = useState<string | null>(null);
    const [ItemType, setItemType] = useState<string | null>("exploitant");
    const [UrlName, setUrlName] = useState<string | null>(null);
    const [Helpdesk, setHelpdesk] = useState<string | null>(null);
    const [Status, setStatus] = useState<string | null>(null);
    const [errorMessage, setErrorMessage] = useState<string | null>(null);

    const [initialData, setInitialData] = useState<CurrentState>({
        CompanyName: null,
        ItemType: VSContactItemType.Exploitant,
        UrlName: null,
        Helpdesk: null,
        Status: null,
    });

    useEffect(() => {
        if (isNew) {
            // Use default values for new record
            const initial = {
                CompanyName: DEFAULT_EXPLOITANT.CompanyName,
                ItemType: DEFAULT_EXPLOITANT.ItemType,
                UrlName: DEFAULT_EXPLOITANT.UrlName,
                Helpdesk: DEFAULT_EXPLOITANT.Helpdesk,
                Status: DEFAULT_EXPLOITANT.Status,
            };

            setCompanyName(initial.CompanyName);
            setItemType(initial.ItemType);
            setUrlName(initial.UrlName);
            setHelpdesk(initial.Helpdesk);
            setStatus(initial.Status);

            setInitialData(initial);
        } else {
            if(activecontact) {
                const initial = {
                    ID: activecontact.ID,
                    CompanyName: activecontact.CompanyName,
                    ItemType: activecontact.ItemType,
                    UrlName: activecontact.UrlName,
                    Helpdesk: activecontact.Helpdesk,
                    Status: activecontact.Status,
                }

                setCompanyName(initial.CompanyName);
                setItemType(initial.ItemType);
                setUrlName(initial.UrlName);
                setHelpdesk(initial.Helpdesk);
                setStatus(initial.Status);
    
                setInitialData(initial);
            }
        }
    }, [props.id, activecontact, isNew]);

    const isDataChanged = () => {
        if (isNew) {
            return !!Helpdesk || !!CompanyName || !!Status || !!UrlName;
        }

        return (
            CompanyName !== initialData.CompanyName ||
            ItemType !== initialData.ItemType ||
            Helpdesk !== initialData.Helpdesk ||
            Status !== initialData.Status ||
            UrlName !== initialData.UrlName
        );
    };

    const handleUpdate = async () => {

        if (!Helpdesk || !CompanyName || !Status) {
            setErrorMessage("Naam, Helpdesk en Status mogen niet leeg zijn.");
            return;
        }

        const id = false===isNew ? props.id : 'new';

        try {
            const data: Partial<VSContactExploitant> = {
                ID: id,
                CompanyName: CompanyName || '',
                ItemType: VSContactItemType.Exploitant,
                Helpdesk: Helpdesk || '',
                Status: Status || '',
                UrlName: UrlName || ''
            };

            const urlValidate = `/api/protected/exploitant/validate/`;
            const responseValidate = await makeClientApiCall<ExploitantValidateResponse>(urlValidate, 'POST', data);
            if(!responseValidate.success) {
              setErrorMessage(`Kan exploitantdata niet valideren: (${responseValidate.error})`);
              return;
            }
  
            if (!responseValidate.result.valid) {
              setErrorMessage(responseValidate.result.message);
              return;
            }
  
            const method = isNew ? 'POST' : 'PUT';
            const url = `/api/protected/exploitant/${id}`;
            const response = await makeClientApiCall<ExploitantResponse>(url, method, data);

            if (!response.success) {
                setErrorMessage(`Kan exploitantdata niet opslaan: (${response.error})`);
                return;
            }

            if (!response.result?.error) {
                if (props.onClose) {
                    props.onClose(false);
                } else {
                    setIsEditing(false);
                }
            } else {
                console.error("API Error Response:", response.result?.error || 'Onbekende fout bij het opslaan van de exploitant');
                setErrorMessage('Fout bij het opslaan van de exploitant');
            }
        } catch (error) {
            setErrorMessage('Fout: ' + (error instanceof Error ? error.message : String(error)));
        }
    };

    const handleReset = () => {
        if (isNew) {
            setCompanyName(null);
            setItemType("exploitant");
            setHelpdesk(null);
            setStatus(null);
            setUrlName(null);
        } else {
            setCompanyName(initialData.CompanyName);
            setItemType(initialData.ItemType);
            setHelpdesk(initialData.Helpdesk);
            setStatus(initialData.Status);
            setUrlName(initialData.UrlName);
        }
    };

    const renderTopBar = () => {
        const title: string = "Instellingen " + (CompanyName || "") + (isNew ? " (Nieuw)" : "");
        const showUpdateButtons: boolean = isEditing;
        const allowSave: boolean = isDataChanged();
        return (
            <PageTitle className="flex w-full justify-center sm:justify-start">
                <div className="mr-4 hidden sm:block">
                    {title}
                </div>
                {!isNew && allowEdit && !props.onClose && !isEditing && (
                    <Button
                        key="b-edit"
                        className="mt-3 sm:mt-0"
                        onClick={() => setIsEditing(true)}
                    >
                        Bewerken
                    </Button>
                )}
                {showUpdateButtons && (
                    <>
                        <Button
                            key="b-1"
                            className="mt-3 sm:mt-0"
                            onClick={handleUpdate}
                            disabled={!allowSave}
                        >
                            Opslaan
                        </Button>
                        <Button
                            key="b-3"
                            className="ml-2 mt-3 sm:mt-0"
                            onClick={() => {
                                handleReset();
                                if (props.onClose) {
                                    props.onClose(isDataChanged());
                                } else {
                                    setIsEditing(false);
                                }
                            }}
                        >
                            {props.onClose ? "Annuleer" : "Herstel"}
                        </Button>
                    </>
                )}
                {!isEditing && props.onClose && (
                    <Button
                        key="b-4"
                        className="ml-2 mt-3 sm:mt-0"
                        onClick={() => props.onClose && props.onClose(isDataChanged())}
                    >
                        Terug
                    </Button>
                )}
            </PageTitle>
        );
    };

    return (
        <div style={{ minHeight: "65vh" }}>
            <div className="flex justify-between sm:mr-8">
                {renderTopBar()}
            </div>
            {errorMessage && (
                <div className="text-red-600 font-bold mb-4">
                    {errorMessage}
                </div>
            )}
            <FormInput
                label="Naam"
                value={CompanyName || ""}
                onChange={(e) => setCompanyName(e.target.value || null)}
                required
                disabled={!isEditing}
            />
            <br />
            <FormInput 
                label="URL-vriendelijke naam"
                value={UrlName || ""}
                onChange={(e) => setUrlName(e.target.value || null)}
                required
                disabled={!isEditing}
            />
            <br />
            <FormInput
                label="E-mailadres helpdesk"
                value={Helpdesk || ""}
                onChange={(e) => setHelpdesk(e.target.value || null)}
                required
                disabled={!isEditing}
            />
            <br />
            <FormSelect
                label="Status"
                value={Status || ""}
                onChange={(e) => setStatus(e.target.value || null)}
                required
                options={[
                    { label: "Actief", value: "1" },
                    { label: "Inactief", value: "0" },
                ]}
                disabled={!isEditing}
            />
            <br />
        </div>
    );
};

export default ExploitantEdit;