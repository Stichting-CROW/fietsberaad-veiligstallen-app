import React, { useEffect, useState } from 'react';
import ParkingEditLocation from "~/components/parking/ParkingEditLocation";
import { Tabs, Tab } from '@mui/material';
import ContactFietsenstallingen from './ContactFietsenstallingen';
import type { fietsenstallingtypen } from '@prisma/client';
import FormInput from "~/components/Form/FormInput";
import FormTimeInput from "~/components/Form/FormTimeInput";
import ContactEditLogo from "~/components/contact/ContactEditLogo";
import SectionBlockEdit from "~/components/SectionBlock";
import PageTitle from "~/components/PageTitle";
import Button from '@mui/material/Button';

import { VSContactExploitant, VSUserWithRoles } from '~/types';
import ContactUsers from './ContactUsers';
import FormSelect from '../Form/FormSelect';

type ExploitantEditProps = {
    id: string;
    exploitanten: VSContactExploitant[];
    users: VSUserWithRoles[];
    fietsenstallingtypen: fietsenstallingtypen[]; 
    onClose: () => void;
    onEditStalling: (stallingID: string | undefined) => void;
    onEditUser: (userID: string | undefined) => void;
    onSendPassword: (userID: string | undefined) => void;
    hidden: boolean;
}

// add a serverside call that gets all stallingen for the contact


const ExploitantEdit = (props: ExploitantEditProps) => {
    const [selectedTab, setSelectedTab] = useState<string>("tab-algemeen");
    const [centerCoords, setCenterCoords] = React.useState<string | undefined>(undefined);

    // fields for exploitant
    // "Helpdesk" | 
    // "CompanyName" | 
    // "UrlName" | 
    // "Status" | 
    // "Helpdesk"


    type CurrentState = {
      Helpdesk: string|undefined,
      CompanyName: string|undefined,
      UrlName: string|undefined,
      Status: string|undefined,
    }
  
    const isNewContact = props.id === "nieuw";
    const [Helpdesk, setHelpdesk] = useState<string|undefined>(undefined);
    const [CompanyName, setCompanyName] = useState<string|undefined>(undefined);
    const [UrlName, setUrlName] = useState<string|undefined>(undefined);
    const [Status, setStatus] = useState<string|undefined>(undefined);
  
    const cDefaultCoordinaten = [52.1326, 5.2913].join(","); // center of NL by default 
  
    const [initialData, setInitialData] = useState<CurrentState>({
      Helpdesk: '',
      CompanyName: undefined,
      UrlName: undefined,
      Status: undefined,
    });

  useEffect(() => {
      if (!isNewContact) {
        const thecontact = props.exploitanten.find(c => c.ID === props.id);
        if (thecontact) {
          const initial = {
            Helpdesk: thecontact.Helpdesk || initialData.Helpdesk,
            CompanyName: thecontact.CompanyName || initialData.CompanyName,
            UrlName: thecontact.UrlName || initialData.UrlName,
            Status: thecontact.Status || initialData.Status,
          };
  
          setHelpdesk(initial.Helpdesk);
          setCompanyName(initial.CompanyName);
          setUrlName(initial.UrlName);
          setStatus(initial.Status);
  
          setInitialData(initial);
        }
      }
    }, [props.id, props.exploitanten, isNewContact]);

    const isDataChanged = () => {
        if (isNewContact) {
          return Helpdesk || CompanyName || UrlName || Status;
        }
        return (
            Helpdesk !== initialData.Helpdesk ||
            CompanyName !== initialData.CompanyName ||
            UrlName !== initialData.UrlName ||
            Status !== initialData.Status
        );
      };
    
      const handleUpdateParking = async () => {
        if (!Helpdesk || !CompanyName || !UrlName || !Status) {
          alert("Helpdesk, CompanyName, UrlName and Status cannot be empty.");
          return;
        }
    
        try {
          const method = isNewContact ? 'POST' : 'PUT';
          const url = isNewContact ? '/api/exploitanten' : `/api/exploitanten/${props.id}`;
          const response = await fetch(url, {
            method,
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              Helpdesk,
              CompanyName,
              UrlName,
              Status,
            }),
          });
    
          if (response.ok) {
            props.onClose();
          } else {
            console.error('Failed to update contact');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      };
    
      const handleReset = () => {
        if (isNewContact) {
          setHelpdesk(undefined);
          setCompanyName(undefined);
          setUrlName(undefined);
          setStatus(undefined);
        } else {
          setHelpdesk(initialData.Helpdesk);
          setCompanyName(initialData.CompanyName);
          setUrlName(initialData.UrlName);
          setStatus(initialData.Status);
        }
      };
    
    
      const handleChange = (event: React.SyntheticEvent, newValue: string) => {
        setSelectedTab(newValue);
      };

      const handleClose = (close: boolean) => {
        console.log("handleClose", close);
      };

      const handleRemoveExploitant = (message: string) => {
        console.log("handleRemoveExploitant", message);
      };

      const renderTopBar = (currentContact: VSContactExploitant | undefined) => {
        const title: string = currentContact ? "Exploitant " + currentContact?.CompanyName : "Nieuwe exploitant";
        const showUpdateButtons: boolean = true;
        const allowSave: boolean = true;
        return (
            <PageTitle className="flex w-full justify-center sm:justify-start">
              <div className="mr-4 hidden sm:block">
                {title}
              </div>
              {showUpdateButtons === true && allowSave && (
                <Button
                  key="b-1"
                  className="mt-3 sm:mt-0"
                  onClick={(e: any) => {
                    if (e) e.preventDefault();
                    handleUpdateParking();
                  }}
                >
                  Opslaan
                </Button>
              )}
              <Button
                key="b-2"
                className="ml-6 mt-3 sm:mt-0"
                onClick={(e: any) => {
                  if (e) e.preventDefault();
                  handleRemoveExploitant(
                    "Weet u zeker dat u deze exploitant wilt verbergen?",
                  );
                }}
              >
                Verberg
              </Button>
              {showUpdateButtons === true && (
                <Button
                  key="b-3"
                  className="ml-2 mt-3 sm:mt-0"
                  onClick={(e: any) => {
                    if (e) e.preventDefault();
    
                    if (confirm("Wil je het bewerkformulier verlaten?")) {
                      props.onClose();
                    }
                  }}
                >
                  Annuleer
                </Button>
              )}
              {showUpdateButtons === false && (
                <Button
                  key="b-4"
                  className="ml-2 mt-3 sm:mt-0"
                  onClick={(e: any) => {
                    if (e) e.preventDefault();
                    props.onClose();
                  }}
                >
                  Terug
                </Button>
              )}
            </PageTitle>
        );
      };

      const thecontact: VSContactExploitant | undefined = props.exploitanten.find(c => c.ID === props.id);

      console.log("#### thecontact", thecontact);

      // Find the current user
      const currentUser = props.users.find(user => user.security_users_sites.some(site => site.SiteID === props.id));
      const userlist: { label: string, value: string | undefined }[] = [
        { label: "Geen", value: undefined },
        ...props.users.map(user => ({ label: (user.DisplayName || "") + " (" + (user.UserName || "") + ")", value: user.UserID || "" }))
      ];
      console.log("#### userlist", userlist);
      /* <div data-name="content-left" className={`sm:mr-12 ${props.hidden ? "hidden" : ""}`} style={{ minHeight: '87vh' }}> */
    return (
      <div className={`${props.hidden ? "hidden" : ""}`} style={{ minHeight: "65vh" }}>
      <div
        className="
          flex justify-between
          sm:mr-8
        "
      >        
        { renderTopBar(thecontact) }
        </div>
            <Tabs value={selectedTab} onChange={handleChange} aria-label="Edit contact">
              <Tab label="Algemeen" value="tab-algemeen" />
              <Tab label="Gemeenten" value="tab-gemeenten" />
              <Tab label="Gebruikers" value="tab-gebruikers" />
            </Tabs>
            {selectedTab === "tab-algemeen" && (
              <div className="mt-4 w-full">
                  <FormInput 
                    label="Helpdesk"
                    value={Helpdesk} 
                    onChange={(e) => setHelpdesk(e.target.value)} 
                    required 
                  />
                  <br />
                  <FormInput 
                    label="CompanyName"
                    value={CompanyName} 
                    onChange={(e) => setCompanyName(e.target.value)} 
                  />
                  <br />
                  <FormInput 
                    label="URL vriendelijke naam"
                    value={UrlName} 
                    onChange={(e) => setUrlName(e.target.value)} 
                  />
                  <br />
                  <FormSelect 
                    label="Status"
                    value={Status} 
                    onChange={(e) => setStatus(e.target.value)} 
                    required
                    options={[
                      { label: "Actief", value: "1" },
                      { label: "Inactief", value: "0" },
                    ]}
                  />

                  <br />
              </div>
            )}
            {selectedTab === "tab-gemeenten" && (
              <div className="border px-4 py-2">
                ...gemeenten beheer...
              </div>
            )}
            {selectedTab === "tab-gebruikers" && (
              <div className="border px-4 py-2">
                {/* <ContactUsers contact={thecontact} users={props.users} onEditUser={props.onEditUser} onSendPassword={props.onSendPassword} /> */}
                ...gebruikers beheer...
              </div>
            )}
      </div>
  );
};

export default ExploitantEdit;