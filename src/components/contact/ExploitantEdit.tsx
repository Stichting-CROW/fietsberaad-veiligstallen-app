import React, { useEffect, useState } from 'react';
import { Tabs, Tab } from '@mui/material';
import FormInput from "~/components/Form/FormInput";
import PageTitle from "~/components/PageTitle";
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';
import DialogContent from '@mui/material/DialogContent';
import DialogActions from '@mui/material/DialogActions';
import TextField from '@mui/material/TextField';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemText from '@mui/material/ListItemText';

import type { VSContactExploitant, VSContactGemeente, VSContactGemeenteInLijst } from '~/types/contacts';
import type { VSUserWithRoles, VSUserWithRolesNew } from '~/types/users';
import type { VSModule } from '~/types/modules';
import { makeClientApiCall } from '~/utils/client/api-tools';

import FormSelect from '../Form/FormSelect';
import { ExploitantResponse } from '~/pages/api/protected/exploitant/[id]';
import { getDefaultNewExploitant } from '~/types/database';
import { useExploitant } from '~/hooks/useExploitant';
import { ExploitantValidateResponse } from '~/pages/api/protected/exploitant/validate';
import { useUsers } from '~/hooks/useUsers';
import { ExploitantGemeenteResponse } from '~/pages/api/protected/exploitant/[id]/gemeenten/[gemeenteid]';

type ExploitantEditProps = {
    id: string;
    gemeenten: VSContactGemeenteInLijst[];
    onClose?: (confirmClose: boolean) => void;
    onEditStalling: (stallingID: string | undefined) => void;
    onEditUser: (userID: string | undefined) => void;
    onSendPassword: (userID: string | undefined) => void;
}

const DEFAULT_EXPLOITANT: VSContactExploitant = {
    ...getDefaultNewExploitant("Testexploitant " + new Date().toISOString()),
};

const ExploitantEdit = (props: ExploitantEditProps) => {
    const [selectedTab, setSelectedTab] = useState<string>("tab-algemeen");
    const [isEditing, setIsEditing] = useState(!!props.onClose);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [selectedGemeenteId, setSelectedGemeenteId] = useState<string | undefined>(undefined);
    const [filterText, setFilterText] = useState('');

    const { exploitant: activecontact, isLoading: isLoading, error: error, reloadExploitant } = useExploitant(props.id);
    const { users } = useUsers();

    type CurrentState = Partial<VSContactExploitant> & {
        CompanyName: string | null;
        ItemType: string | null;
        Helpdesk: string | null;
        Password: string | null;
        Status: string | null;
        ParentID: string | null;
    }

    const isNew = props.id === "new";

    const allowEdit = true; // TODO: check rights

    const [CompanyName, setCompanyName] = useState<string | null>(null);
    const [ItemType, setItemType] = useState<string | null>("exploitant");
    const [Helpdesk, setHelpdesk] = useState<string | null>(null);
    const [Password, setPassword] = useState<string | null>(null);
    const [Status, setStatus] = useState<string | null>(null);
    const [ParentID, setParentID] = useState<string | null>(null);
    const [errorMessage, setErrorMessage] = useState<string | null>(null);

    const [initialData, setInitialData] = useState<CurrentState>({
        CompanyName: null,
        ItemType: "exploitant",
        Helpdesk: null,
        Password: null,
        Status: null,
        ParentID: null
    });

    useEffect(() => {
        if (isNew) {
            // Use default values for new record
            const initial = {
                CompanyName: DEFAULT_EXPLOITANT.CompanyName,
                ItemType: DEFAULT_EXPLOITANT.ItemType,
                Helpdesk: DEFAULT_EXPLOITANT.Helpdesk,
                Password: DEFAULT_EXPLOITANT.Password,
                Status: DEFAULT_EXPLOITANT.Status,
                ParentID: DEFAULT_EXPLOITANT.ParentID
            };

            setCompanyName(initial.CompanyName);
            setItemType(initial.ItemType);
            setHelpdesk(initial.Helpdesk);
            setPassword(initial.Password);
            setStatus(initial.Status);
            setParentID(initial.ParentID);

            setInitialData(initial);
        } else {
            if(activecontact) {
                const initial = {
                    ID: activecontact.ID,
                    CompanyName: activecontact.CompanyName,
                    ItemType: activecontact.ItemType,
                    Helpdesk: activecontact.Helpdesk,
                    Password: activecontact.Password,
                    Status: activecontact.Status,
                    ParentID: activecontact.ParentID
                }

                setCompanyName(initial.CompanyName);
                setItemType(initial.ItemType);
                setHelpdesk(initial.Helpdesk);
                setPassword(initial.Password);
                setStatus(initial.Status);
                setParentID(initial.ParentID);
    
                setInitialData(initial);
            }
        }
    }, [props.id, activecontact, isNew]);

    const isDataChanged = () => {
        if (isNew) {
            return !!Helpdesk || !!CompanyName || !!Password || !!Status || !!ParentID;
        }

        return (
            CompanyName !== initialData.CompanyName ||
            ItemType !== initialData.ItemType ||
            Helpdesk !== initialData.Helpdesk ||
            Password !== initialData.Password ||
            Status !== initialData.Status ||
            ParentID !== initialData.ParentID
        );
    };

    const handleUpdate = async () => {

        if (!Helpdesk || !CompanyName || !Password || !Status) {
            setErrorMessage("Naam, Helpdesk, URL vriendelijke naam en Status mogen niet leeg zijn.");
            return;
        }

        const id = false===isNew ? props.id : 'new';

        try {
            const data: Partial<VSContactExploitant> = {
                ID: id,
                CompanyName: CompanyName || '',
                ItemType: "exploitant",
                Helpdesk: Helpdesk || '',
                Password: Password || '',
                Status: Status || '',
                ParentID: ParentID || ''
            };

            const urlValidate = `/api/protected/exploitant/validate/`;
            const responseValidate = await makeClientApiCall<ExploitantValidateResponse>(urlValidate, 'POST', data);
            if(!responseValidate.success) {
              setErrorMessage(`Kan exploitantdata niet valideren: (${responseValidate.error})`);
              return;
            }
  
            if (!responseValidate.result.valid) {
              setErrorMessage(responseValidate.result.message);
              return;
            }
  
            const method = isNew ? 'POST' : 'PUT';
            const url = `/api/protected/exploitant/${id}`;
            const response = await makeClientApiCall<ExploitantResponse>(url, method, data);

            if (!response.success) {
                setErrorMessage(`Kan exploitantdata niet opslaan: (${response.error})`);
                return;
            }

            if (!response.result?.error) {
                if (props.onClose) {
                    props.onClose(false);
                }
            } else {
                console.error("API Error Response:", response.result?.error || 'Onbekende fout bij het opslaan van de exploitant');
                setErrorMessage('Fout bij het opslaan van de exploitant');
            }
        } catch (error) {
            setErrorMessage('Fout: ' + (error instanceof Error ? error.message : String(error)));
        }
    };

    const handleReset = () => {
        if (isNew) {
            setCompanyName(null);
            setItemType("exploitant");
            setHelpdesk(null);
            setPassword(null);
            setStatus(null);
            setParentID(null);
        } else {
            setCompanyName(initialData.CompanyName);
            setItemType(initialData.ItemType);
            setHelpdesk(initialData.Helpdesk);
            setPassword(initialData.Password);
            setStatus(initialData.Status);
            setParentID(initialData.ParentID);
        }
    };

    const handleChange = (event: React.SyntheticEvent, newValue: string) => {
        setSelectedTab(newValue);
    };

    const handleLinkGemeente = async (gemeenteId: string | undefined) => {
        if(!gemeenteId) { // just close the modal
            setIsAddModalOpen(false);
            setSelectedGemeenteId(undefined);
            setFilterText('');

            return;
        }

        const url = `/api/protected/exploitant/${props.id}/gemeenten/${gemeenteId}`;
        const response = await makeClientApiCall<ExploitantGemeenteResponse>(url, 'POST', { admin: true });

        if(!response.success) {
            setErrorMessage(`Kan gemeente niet toevoegen: (${response.error})`);
            return;
        }

        if(!response.result?.error) {   
            setIsAddModalOpen(false);
            setSelectedGemeenteId(undefined);
            setFilterText('');

            reloadExploitant();
        } else {
            setErrorMessage(`Kan gemeente niet toevoegen: (${response.result?.error})`);
        }
    };

    const handleUnlinkGemeente = async (gemeenteId: string) => {
        const url = `/api/protected/exploitant/${props.id}/gemeenten/${gemeenteId}`;
        const response = await makeClientApiCall<ExploitantGemeenteResponse>(url, 'DELETE', {});

        if(!response.success) {
            setErrorMessage(`Kan gemeente niet verwijderen: (${response.error})`);
            return;
        }

        if(!response.result?.error) {
            reloadExploitant();
        } else {
            setErrorMessage(`Kan gemeente niet verwijderen: (${response.result?.error})`);
        }
    };

    const getAvailableGemeenten = () => {
        const managedGemeenteIds = activecontact?.isManagingContacts?.map(relation => relation.childSiteID) || [];
        return props.gemeenten
            .filter(gemeente => !managedGemeenteIds.includes(gemeente.ID))
            .filter(gemeente => 
                gemeente.CompanyName?.toLowerCase().includes(filterText.toLowerCase()) ?? false
            );
    };

    const renderTopBar = () => {
        const title: string = "Instellingen " + (CompanyName || "") + (isNew ? " (Nieuw)" : "");
        const showUpdateButtons: boolean = isEditing;
        const allowSave: boolean = isDataChanged();
        return (
            <PageTitle className="flex w-full justify-center sm:justify-start">
                <div className="mr-4 hidden sm:block">
                    {title}
                </div>
                {!isNew && allowEdit && !props.onClose && !isEditing && (
                    <Button
                        key="b-edit"
                        className="mt-3 sm:mt-0"
                        onClick={() => setIsEditing(true)}
                    >
                        Bewerken
                    </Button>
                )}
                {showUpdateButtons && (
                    <>
                        <Button
                            key="b-1"
                            className="mt-3 sm:mt-0"
                            onClick={handleUpdate}
                            disabled={!allowSave}
                        >
                            Opslaan
                        </Button>
                        <Button
                            key="b-3"
                            className="ml-2 mt-3 sm:mt-0"
                            onClick={() => {
                                handleReset();
                                if (props.onClose) {
                                    props.onClose(isDataChanged());
                                } else {
                                    setIsEditing(false);
                                }
                            }}
                        >
                            {props.onClose ? "Annuleer" : "Herstel"}
                        </Button>
                    </>
                )}
                {!isEditing && props.onClose && (
                    <Button
                        key="b-4"
                        className="ml-2 mt-3 sm:mt-0"
                        onClick={() => props.onClose && props.onClose(isDataChanged())}
                    >
                        Terug
                    </Button>
                )}
            </PageTitle>
        );
    };

    return (
        <div style={{ minHeight: "65vh" }}>
            <div className="flex justify-between sm:mr-8">
                {renderTopBar()}
            </div>
            <Tabs value={selectedTab} onChange={handleChange} aria-label="Edit contact">
                <Tab label="Algemeen" value="tab-algemeen" />
                {/* <Tab label="Gebruikers" value="tab-gebruikers" /> */}
                <Tab label="Gemeenten" value="tab-gemeenten" />
            </Tabs>
            {selectedTab === "tab-algemeen" && (
                <div className="mt-4 w-full">
                    {errorMessage && (
                        <div className="text-red-600 font-bold mb-4">
                            {errorMessage}
                        </div>
                    )}
                    <FormInput
                        label="Naam"
                        value={CompanyName || ""}
                        onChange={(e) => setCompanyName(e.target.value || null)}
                        required
                        disabled={!isEditing}
                    />
                    <br />
                    <FormInput
                        label="Gebruikersnaam / e-mail"
                        value={Helpdesk || ""}
                        onChange={(e) => setHelpdesk(e.target.value || null)}
                        required
                        disabled={!isEditing}
                    />
                    <br />
                    <FormInput
                        label="Wachtwoord"
                        value={Password || ""}
                        onChange={(e) => setPassword(e.target.value || null)}
                        required
                        disabled={!isEditing}
                    />
                    <br />
                    <FormSelect
                        label="Status"
                        value={Status || ""}
                        onChange={(e) => setStatus(e.target.value || null)}
                        required
                        options={[
                            { label: "Actief", value: "1" },
                            { label: "Inactief", value: "0" },
                        ]}
                        disabled={!isEditing}
                    />
                    <br />
                </div>
            )}
            {/* {selectedTab === "tab-gebruikers" && (
                <div className="mt-4 w-full">
                    <div className="border px-4 py-2">
                        <h3 className="text-lg font-semibold mb-4">Gebruikers</h3>
                        {isLoading ? (
                            <div className="flex justify-center items-center">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                            </div>
                        ) : (
                            <div>
                                {users.length > 0 ? (
                                    <div className="space-y-4">
                                        {users
                                            .filter(user => user.sites.some(site => site.SiteID === props.id))
                                            .map(user => (
                                                <div key={user.UserID} className="flex items-center justify-between p-2 border rounded">
                                                    <div>
                                                        <div className="font-medium">{user.DisplayName}</div>
                                                        <div className="text-sm text-gray-600">{user.UserName}</div>
                                                    </div>
                                                    <div className="space-x-2">
                                                        <Button
                                                            size="small"
                                                            onClick={() => props.onEditUser(user.UserID)}
                                                            disabled={!isEditing}
                                                        >
                                                            Bewerken
                                                        </Button>
                                                        <Button
                                                            size="small"
                                                            onClick={() => props.onSendPassword(user.UserID)}
                                                            disabled={!isEditing}
                                                        >
                                                            Wachtwoord
                                                        </Button>
                                                    </div>
                                                </div>
                                            ))}
                                    </div>
                                ) : (
                                    <p>Geen gebruikers gevonden voor deze exploitant.</p>
                                )}
                            </div>
                        )}
                    </div>
                </div>
            )} */}
            {selectedTab === "tab-gemeenten" && (
                <div className="mt-4 w-full">
                    <div className="border px-4 py-2">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-semibold">Toegang tot stallingen van gemeente(n)</h3>
                            <Button
                                variant="contained"
                                onClick={() => setIsAddModalOpen(true)}
                                disabled={!isEditing}
                            >
                                Gemeente Toevoegen
                            </Button>
                        </div>
                        {isLoading ? (
                            <div className="flex justify-center items-center">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                            </div>
                        ) : (
                            <div>
                                {activecontact?.isManagingContacts && activecontact.isManagingContacts.length > 0 ? (
                                    <div className="space-y-4">
                                        {activecontact.isManagingContacts.map(relation => { 
                                            const gemeente = props.gemeenten.find(g => g.ID === relation.childSiteID);
                                            if(!gemeente) {
                                                return null;
                                            }

                                            return (
                                                <div key={relation.ID} className="flex items-center justify-between p-2 border rounded">
                                                    <div>
                                                        <div className="font-medium">{gemeente.CompanyName}</div>
                                                        {/* <div className="text-sm text-gray-600">
                                                            {relation.admin ? 'Admin' : 'Gebruiker'}
                                                        </div> */}
                                                    </div>
                                                    <Button
                                                        size="small"
                                                        onClick={() => handleUnlinkGemeente(relation.childSiteID)}
                                                        disabled={!isEditing}
                                                    >
                                                        Verwijderen
                                                    </Button>
                                                </div>
                                            )
                                        })}
                                    </div>
                                ) : (
                                    <p>Geen gemeenten gevonden voor deze exploitant.</p>
                                )}
                            </div>
                        )}
                    </div>

                    <Dialog 
                        open={isAddModalOpen} 
                        onClose={() => handleLinkGemeente(undefined)}
                        maxWidth="sm"
                        fullWidth
                    >
                        <DialogTitle>Gemeente Toevoegen</DialogTitle>
                        <DialogContent>
                            <TextField
                                autoFocus
                                margin="dense"
                                label="Filter gemeenten"
                                fullWidth
                                variant="outlined"
                                value={filterText}
                                onChange={(e) => setFilterText(e.target.value)}
                                className="mb-4"
                            />
                            <List sx={{ maxHeight: 400, overflow: 'auto' }}>
                                {getAvailableGemeenten().map((gemeente) => (
                                    <ListItem key={gemeente.ID} disablePadding>
                                        <ListItemButton
                                            selected={selectedGemeenteId === gemeente.ID}
                                            onClick={() => setSelectedGemeenteId(gemeente.ID)}
                                        >
                                            <ListItemText primary={gemeente.CompanyName} />
                                        </ListItemButton>
                                    </ListItem>
                                ))}
                            </List>
                        </DialogContent>
                        <DialogActions>
                            <Button onClick={() => handleLinkGemeente(undefined)}>Afbreken</Button>
                            <Button 
                                onClick={() => handleLinkGemeente(selectedGemeenteId)}
                                disabled={!selectedGemeenteId}
                                variant="contained"
                            >
                                Toevoegen
                            </Button>
                        </DialogActions>
                    </Dialog>
                </div>
            )}
        </div>
    );
};

export default ExploitantEdit;