import React, { useEffect, useState } from 'react';
import { Tabs, Tab } from '@mui/material';
import type { fietsenstallingtypen } from '@prisma/client';
import FormInput from "~/components/Form/FormInput";
import PageTitle from "~/components/PageTitle";
import Button from '@mui/material/Button';

import type { VSContactExploitant } from '~/types/contacts';
import type { VSUserWithRoles } from '~/types/users';
import type { VSModule } from '~/types/modules';
import { makeClientApiCall } from '~/utils/client/api-tools';

import FormSelect from '../Form/FormSelect';
import { ExploitantResponse } from '~/pages/api/protected/exploitant/[id]';
import { SecurityUsersResponse } from '~/pages/api/protected/security_users';

type ExploitantEditProps = {
    id: string;
    exploitanten: VSContactExploitant[];
    users: VSUserWithRoles[];
    fietsenstallingtypen: fietsenstallingtypen[]; 
    onClose: () => void;
    onEditStalling: (stallingID: string | undefined) => void;
    onEditUser: (userID: string | undefined) => void;
    onSendPassword: (userID: string | undefined) => void;
    hidden: boolean;
}

type ExploitantState = {
    ID: string;
    Helpdesk: string | null;
    CompanyName: string | null;
    ItemType: string | null;
    UrlName: string | null;
    Status: string | null;
    ParentID: string | null;
    isManagingContacts: {
        ID: number;
        childSiteID: string;
        admin: boolean;
    }[];
    isManagedByContacts: {
        ID: number;
        parentSiteID: string;
        admin: boolean;
    }[];
    modules_contacts: {
        module: VSModule;
    }[];
}

const ExploitantEdit = (props: ExploitantEditProps) => {
    console.log(">>> exploitant edit props", props);

    const [selectedTab, setSelectedTab] = useState<string>("tab-algemeen");
    const [centerCoords, setCenterCoords] = React.useState<string | undefined>(undefined);
    const [showAddUserModal, setShowAddUserModal] = useState(false);
    const [selectedUser, setSelectedUser] = useState<string>("");
    const [isMainUser, setIsMainUser] = useState(false);
    const [newUser, setNewUser] = useState({
        DisplayName: "",
        UserName: "",
        Password: ""
    });
    const [users, setUsers] = useState<VSUserWithRoles[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [updateCounter, setUpdateCounter] = useState(0);

    const isNewContact = props.id === "nieuw";
    const [state, setState] = useState<ExploitantState>({
        ID: "",
        Helpdesk: null,
        CompanyName: null,
        ItemType: "exploitant",
        UrlName: null,
        Status: null,
        ParentID: null,
        isManagingContacts: [],
        isManagedByContacts: [],
        modules_contacts: []
    });

    const [initialData, setInitialData] = useState<ExploitantState>({
        ID: "",
        Helpdesk: null,
        CompanyName: null,
        ItemType: "exploitant",
        UrlName: null,
        Status: null,
        ParentID: null,
        isManagingContacts: [],
        isManagedByContacts: [],
        modules_contacts: []
    });

    const getMainUser = (): VSUserWithRoles | null => {
        if(!users) return null;

        console.log(">>> users", users);

        return users.find((user) => 
            user.security_users_sites?.some(site => site.SiteID === props.id)
        ) || null;
    };

    const getSubUsers = (): VSUserWithRoles[] => {


        const mainUser = getMainUser();

        return mainUser ? users.filter((user) => user.ParentID === mainUser.UserID) : [];
    };

    const fetchUsers = async () => {
        setIsLoading(true);
        try {
            const response = await makeClientApiCall<SecurityUsersResponse>('/api/protected/security_users');
            if (response.success && response.result && response.result.data) {
                setUsers(response.result.data);
            } else {
                console.error('Failed to fetch users:', response.error);
            }
        } catch (error) {
            console.error('Error fetching users:', error);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, [updateCounter]);

    useEffect(() => {
        if (!isNewContact) {
            const thecontact = props.exploitanten.find(c => c.ID === props.id);
            if (thecontact) {
                const initial = {
                    ID: thecontact.ID,
                    Helpdesk: thecontact.Helpdesk,
                    CompanyName: thecontact.CompanyName,
                    ItemType: thecontact.ItemType,
                    UrlName: thecontact.UrlName,
                    Status: thecontact.Status,
                    ParentID: thecontact.ParentID,
                    isManagingContacts: thecontact.isManagingContacts,
                    isManagedByContacts: thecontact.isManagedByContacts,
                    modules_contacts: thecontact.modules_contacts
                };

                setState(initial);
                setInitialData(initial);
            }
        }
    }, [props.id, props.exploitanten, isNewContact]);

    const isDataChanged = () => {
        if (isNewContact) {
            return state.Helpdesk || state.CompanyName || state.UrlName || state.Status;
        }
        return (
            state.Helpdesk !== initialData.Helpdesk ||
            state.CompanyName !== initialData.CompanyName ||
            state.UrlName !== initialData.UrlName ||
            state.Status !== initialData.Status ||
            state.ParentID !== initialData.ParentID
        );
    };

    const handleUpdate = async () => {
        if (!state.Helpdesk || !state.CompanyName || !state.UrlName || !state.Status) {
            alert("Helpdesk, Bedrijfsnaam, URL vriendelijke naam en Status mogen niet leeg zijn.");
            return;
        }

        try {
            const method = isNewContact ? 'POST' : 'PUT';
            const url = isNewContact ? '/api/exploitanten' : `/api/protected/exploitant/${props.id}`;
            
            console.log(">>> exploitant edit state", state);
            const response = await makeClientApiCall<VSContactExploitant>(url, method, state);

            if (response.success) {
                props.onClose();
            } else {
                console.error('Failed to update contact:', response.error);
                alert('Er is een fout opgetreden bij het opslaan van de exploitant.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Er is een fout opgetreden bij het opslaan van de exploitant.');
        }
    };

    const handleReset = () => {
        if (isNewContact) {
            setState({
                ID: "",
                Helpdesk: null,
                CompanyName: null,
                ItemType: "exploitant",
                UrlName: null,
                Status: null,
                ParentID: null,
                isManagingContacts: [],
                isManagedByContacts: [],
                modules_contacts: []
            });
        } else {
            setState(initialData);
        }
    };

    const handleChange = (event: React.SyntheticEvent, newValue: string) => {
        setSelectedTab(newValue);
    };

    const handleClose = (close: boolean) => {
        console.log("handleClose", close);
    };

    const handleRemoveExploitant = (message: string) => {
        console.log("handleRemoveExploitant", message);
    };

    const handleSetMainUser = async (userId: string) => {
        try {
            const response = await makeClientApiCall<VSUserWithRoles>(
                `/api/protected/security_users/${userId}`,
                'PUT',
                { siteId: props.id }
            );

            if (response.success) {
                alert('Hoofdgebruiker toegewezen aan exploitant.');
                props.onEditUser(userId);
            } else {
                alert('Er is een fout opgetreden bij het toewijzen van de hoofdgebruiker.');
            }
        } catch (error) {
            console.error('Error setting main user:', error);
            alert('Er is een fout opgetreden bij het toewijzen van de hoofdgebruiker.');
        }
    };

    const handleRemoveSubUser = async (userId: string) => {
        if (confirm('Weet je zeker dat je deze gebruiker wilt verwijderen?')) {
            try {
                const response = await makeClientApiCall<VSUserWithRoles>(
                    `/api/protected/user/${userId}/remove-parent`,
                    'POST'
                );

                if (response.success) {
                    setUpdateCounter(prev => prev + 1);
                } else {
                    alert('Er is een fout opgetreden bij het verwijderen van de gebruiker.');
                }
            } catch (error) {
                console.error('Error removing user:', error);
                alert('Er is een fout opgetreden bij het verwijderen van de gebruiker.');
            }
        }
    };

    const handleAddUser = async () => {
        if (!newUser.DisplayName || !newUser.UserName || !newUser.Password) {
            alert('Vul alle velden in');
            return;
        }

        try {
            const mainUser = getMainUser();
            if (!mainUser) {
                alert('Er moet eerst een hoofdgebruiker zijn voordat subgebruikers kunnen worden toegevoegd.');
                return;
            }

            // Check if user already exists
            const existingUser = users.find(user => 
                user.UserName === newUser.UserName
            );

            if (existingUser) {
                alert('Er bestaat al een gebruiker met deze gebruikersnaam.');
                return;
            }

            const data = {
                    ...newUser,
                    RoleID: 5, // Subuser role
                    ParentID: mainUser.UserID,
                    GroupID: "extern", // Set group ID for subusers
                    Status: "1", // Active status
                    // security_users_sites: [{
                    //     SiteID: props.id,
                    //     IsContact: false
                    // }]
            };
            console.log(">>> using api to add new user", data);
            const response = await makeClientApiCall<SecurityUsersResponse>(
                '/api/protected/security_users',
                'POST',
                data
            );

            if (response.success && response.result) {
                alert('Gebruiker toegevoegd als subgebruiker.');
                setShowAddUserModal(false);
                setNewUser({
                    DisplayName: "",
                    UserName: "",
                    Password: ""
                });
                setUpdateCounter(prev => prev + 1);
            } else {
                alert('Er is een fout opgetreden bij het toevoegen van de gebruiker.');
            }
        } catch (error) {
            console.error('Error adding user:', error);
            alert('Er is een fout opgetreden bij het toevoegen van de gebruiker.');
        }
    };

    const renderAddUserModal = () => {
        return (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="bg-white p-6 rounded-lg max-w-md w-full">
                    <h3 className="text-lg font-semibold mb-4">Nieuwe gebruiker toevoegen</h3>
                    
                    <div className="space-y-4">
                        <FormInput
                            label="Naam"
                            value={newUser.DisplayName}
                            onChange={(e) => setNewUser({...newUser, DisplayName: e.target.value})}
                            required
                        />
                        <FormInput
                            label="Gebruikersnaam"
                            value={newUser.UserName}
                            onChange={(e) => setNewUser({...newUser, UserName: e.target.value})}
                            required
                        />
                        <FormInput
                            label="Wachtwoord"
                            type="password"
                            value={newUser.Password}
                            onChange={(e) => setNewUser({...newUser, Password: e.target.value})}
                            required
                        />

                        <div className="flex justify-end gap-4 mt-4">
                            <button
                                onClick={() => {
                                    setShowAddUserModal(false);
                                    setNewUser({
                                        DisplayName: "",
                                        UserName: "",
                                        Password: ""
                                    });
                                }}
                                className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
                            >
                                Annuleren
                            </button>
                            <button
                                onClick={handleAddUser}
                                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                            >
                                Toevoegen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    const renderGebruikersTab = () => {
        if (isLoading) {
            return (
                <div className="mt-4 flex justify-center items-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                </div>
            );
        }

        const mainUser = getMainUser();
        const subUsers = getSubUsers();
        const allUsers = mainUser ? [mainUser, ...subUsers] : subUsers;

        return (
            <div className="mt-4">
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold">Gebruikers</h3>
                    <button
                        onClick={() => setShowAddUserModal(true)}
                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                    >
                        Gebruiker toevoegen
                    </button>
                </div>

                <table className="min-w-full bg-white">
                    <thead>
                        <tr>
                            <th className="py-2">Naam</th>
                            <th className="py-2">Gebruikersnaam</th>
                            <th className="py-2">Type</th>
                            <th className="py-2">Acties</th>
                        </tr>
                    </thead>
                    <tbody>
                        {allUsers.map((user: VSUserWithRoles): JSX.Element => {
                            const isMainUser = user.UserID === getMainUser()?.UserID;
                            return (
                                <tr key={user.UserID}>
                                    <td className="border px-4 py-2">{user.DisplayName}</td>
                                    <td className="border px-4 py-2">{user.UserName}</td>
                                    <td className="border px-4 py-2">
                                        {isMainUser ? 'Hoofdgebruiker' : 'Subgebruiker'}
                                    </td>
                                    <td className="border px-4 py-2">
                                        {!isMainUser && (
                                            <button
                                                onClick={() => handleRemoveSubUser(user.UserID || '')}
                                                className="text-red-500 hover:text-red-700"
                                            >
                                                Verwijderen
                                            </button>
                                        )}
                                    </td>
                                </tr>
                            );
                        })}
                        {allUsers.length === 0 && (
                            <tr>
                                <td colSpan={4} className="border px-4 py-2 text-center">
                                    Geen gebruikers gevonden
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>

                {showAddUserModal && renderAddUserModal()}
            </div>
        );
    };

    const renderTopBar = (currentContact: VSContactExploitant | undefined) => {
        const title: string = currentContact ? "Exploitant " + currentContact?.CompanyName : "Nieuwe exploitant";
        const showUpdateButtons = true;
        const allowSave = true;
        return (
            <PageTitle className="flex w-full justify-center sm:justify-start">
                <div className="mr-4 hidden sm:block">
                    {title}
                </div>
                {showUpdateButtons && allowSave && (
                    <Button
                        key="b-1"
                        className="mt-3 sm:mt-0"
                        onClick={(e: any) => {
                            if (e) e.preventDefault();
                            handleUpdate();
                        }}
                    >
                        Opslaan
                    </Button>
                )}
                <Button
                    key="b-2"
                    className="ml-6 mt-3 sm:mt-0"
                    onClick={(e: any) => {
                        if (e) e.preventDefault();
                        handleRemoveExploitant(
                            "Weet u zeker dat u deze exploitant wilt verbergen?",
                        );
                    }}
                >
                    Verberg
                </Button>
                {showUpdateButtons && (
                    <Button
                        key="b-3"
                        className="ml-2 mt-3 sm:mt-0"
                        onClick={(e: any) => {
                            if (e) e.preventDefault();

                            if (confirm("Wil je het bewerkformulier verlaten?")) {
                                props.onClose();
                            }
                        }}
                    >
                        Annuleer
                    </Button>
                )}
                {!showUpdateButtons && (
                    <Button
                        key="b-4"
                        className="ml-2 mt-3 sm:mt-0"
                        onClick={(e: any) => {
                            if (e) e.preventDefault();
                            props.onClose();
                        }}
                    >
                        Terug
                    </Button>
                )}
            </PageTitle>
        );
    };

    const thecontact: VSContactExploitant | undefined = props.exploitanten.find(c => c.ID === props.id);

    return (
        <div className={`${props.hidden ? "hidden" : ""}`} style={{ minHeight: "65vh" }}>
            <div className="flex justify-between sm:mr-8">
                {renderTopBar(thecontact)}
            </div>
            <Tabs value={selectedTab} onChange={handleChange} aria-label="Edit contact">
                <Tab label="Algemeen" value="tab-algemeen" />
                <Tab label="Gemeenten" value="tab-gemeenten" />
                <Tab label="Gebruikers" value="tab-gebruikers" />
                <Tab label="Modules" value="tab-modules" />
            </Tabs>
            {selectedTab === "tab-algemeen" && (
                <div className="mt-4 w-full">
                    <FormInput
                        label="Helpdesk"
                        value={state.Helpdesk || ""}
                        onChange={(e) => setState({...state, Helpdesk: e.target.value})}
                        required
                    />
                    <br />
                    <FormInput
                        label="Bedrijfsnaam"
                        value={state.CompanyName || ""}
                        onChange={(e) => setState({...state, CompanyName: e.target.value})}
                        required
                    />
                    <br />
                    <FormInput
                        label="URL vriendelijke naam"
                        value={state.UrlName || ""}
                        onChange={(e) => setState({...state, UrlName: e.target.value})}
                        required
                    />
                    <br />
                    <FormSelect
                        label="Status"
                        value={state.Status || ""}
                        onChange={(e) => setState({...state, Status: e.target.value})}
                        required
                        options={[
                            { label: "Actief", value: "1" },
                            { label: "Inactief", value: "0" },
                        ]}
                    />
                    <br />
                </div>
            )}
            {selectedTab === "tab-gemeenten" && (
                <div className="border px-4 py-2">
                    ...gemeenten beheer...
                </div>
            )}
            {selectedTab === "tab-gebruikers" && renderGebruikersTab()}
            {selectedTab === "tab-modules" && (
                <div className="border px-4 py-2">
                    ...modules beheer...
                </div>
            )}
        </div>
    );
};

export default ExploitantEdit;